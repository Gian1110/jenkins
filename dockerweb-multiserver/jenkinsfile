def remote_host=[:]
//remote.name = 'pipe'
//remote_host.host = '192.168.100.173'
//remote_host.user = 'jenkinsuser'
//remote_host.password = '123456'
remote_host.allowAnyHosts = true


pipeline {
  agent any
 parameters {
    
    // container values
        string(name: 'name_container', defaultValue: 'proyecto-qa', description: 'nombre del docker')
        string(name: 'name_imagen', defaultValue: 'iproyecto-qa', description: 'nombre de la imagen')
        string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
        string(name: 'puerto_imagen', defaultValue: '81', description: 'puerto a publicar')
    
    //registry values
        string(name: 'hostname_registry', defaultValue: '192.168.100.173', description: 'nombre del host donde esta el registry')
        string(name: 'port_registry', defaultValue: '5000', description: 'port del registry')

    //server values
        string(name: 'remote_host.host', defaultValue: '192.168.100.173', description: 'dns o ip del host')
        string(name: 'remote_host.user', defaultValue: 'jenkinsuser', description: 'usuario ssh')
        string(name: 'remote_host.password', defaultValue: '123456', description: 'password ssh')


    }
    environment {
        name_registry = "${hostname_registry}:${port_registry}/${name_imagen}:${tag_imagen}"        
    }
    stages {
           
        stage('build and push') {
            steps {
                script{
                    sh ''' 
                    docker build -t ${name_registry} dockerweb-multiserver/
                    docker push ${name_registry}
                    '''
                    }
                    
                }                    
                                  
            }

        stage('rmi') {
            steps {
                script {
                    sh '''
                        docker rmi ${name_registry}
                    '''
                    }
                }                                 
            }

        stage('ssh download') {
            steps {
                script{
                    sshCommand remote: remote_host, command: "docker ps"
                    sshCommand remote: remote_host, command: "docker pull ${name_registry}"
                    }
                    
                }  
            
            }

        stage('ssh stop/rm') {
            when {
                expression { 
                    DOCKER_EXIST = sh(returnStdout: true, script: 'echo "$(sshCommand remote: remote_host, command: "docker ps -q --filter name=${name_container}")"').trim()
                    return  DOCKER_EXIST != '' 
                }
            }
            steps {
                script{
                    sh ''' 
                         docker stop ${name_final}
                         docker rm  ${name_final}
                    '''
                    }
                    
                }  
            
            }
        stage('ssh run') {
            steps {
                script{
                    sshCommand remote: remote_host, command: "docker run -dp ${puerto_imagen}:80 --name ${name_final} ${name_registry}"
                    }
                    
                }  
            
            }
        }

    }
