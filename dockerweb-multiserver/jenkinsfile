@Library('jenkins-libs') _
pipeline {
  agent any
 parameters {
    
    //server values
        string(name: 'remoteHost', defaultValue: '192.168.100.173', description: 'dns o ip del host')
        string(name: 'version_imagen', defaultValue: 'latest', description: 'version de la applicacion')
        
    }
    environment {
        //path app
        path="./dockerweb-multiserver"
        //registry values
        hostname_registry = '192.168.100.173'
        port_registry = '5000'

        // container values
        name_container = 'proyecto-qa'
        name_imagen_origen = 'iproyecto-qa'
        puerto_imagen = '81'
        name_imagen = "${hostname_registry}:${port_registry}/${name_imagen_origen}:${version_imagen}"   

    }
    stages {


        stage('build and push') {
            steps {
                script{
                    sh "docker build -t ${name_imagen} dockerweb-multiserver/" 
                    echo "pasa build"
                    sh "docker push ${name_imagen}"
                    echo "pasa push"
                    sh "docker rmi ${name_imagen}"
                    
                    }
                    
                }                    
                                  
            }

        stage('ssh pull') {
            steps {
                script{
                        def parameterMap = [:]
                        parameterMap["remoteHost"] = params.remoteHost
                        parameterMap["nameContainer"] = name_container
                        parameterMap["versionImagen"] = imagenver
                        dockerb.dockerPull(parameterMap);
                            
                    }
                    
                }  
            
            }

        stage('ssh rm and run') {
            steps {
                script{

                    def parameterMap = [:]
                    parameterMap["remoteHost"] = params.remoteHost
                    parameterMap["nameContainer"] = name_container
                    parameterMap["puertoContainer"] = puerto_imagen
                    dockerb.dockerRmRun(parameterMap);
                    
                    }
                }  
            
            }
        }

    }
