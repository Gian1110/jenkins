@Library('jenkins-libs') _
pipeline {
  agent any
 parameters {
    
    //server values
        string(name: 'remoteHost', defaultValue: '192.168.100.173', description: 'dns o ip del host')
        string(name: 'version_imagen', defaultValue: 'latest', description: 'version de la applicacion')
        
    }
    environment {
        //registry values
        hostname_registry = '192.168.100.173'
        port_registry = '5000'

        // container values
        name_container = 'proyecto-qa'
        name_imagen_origen = 'iproyecto-qa'
        puerto_imagen = '81'
        name_imagen = "${hostname_registry}:${port_registry}/${name_imagen_origen}:${version_imagen}"   

    }
    stages {

        // stage('build and push') {
        //     steps {
        //         script{
        //             sh ''' 
        //             docker build -t ${name_imagen} dockerweb-multiserver/
        //             docker push ${name_imagen}
        //             '''
        //             }
                    
        //         }                    
                                  
        //     }

        // stage('rmi') {
        //     steps {
        //         script {
        //             sh '''
        //                 docker rmi ${name_imagen}
        //             '''
        //             }
        //         }                                 
        //     }

        stage('ssh download') {
            steps {
                script{
                        // def parameterMap = [:]
                        // parameterMap["remoteHost"] = "${params.remoteHost}"
                        // parameterMap["nameImagen"] = "${name_imagen}"
                        // def salida = dockerb.dockerpull(parameterMap);
                        def remoteH = dockerb.initial(params.remoteHost);

                        sshCommand remote: remoteH, command: "docker ps"      
                    }
                    
                }  
            
            }

        // stage('ssh stop/rm') {
        //     when {
        //         expression { 

        //             def remoteHost = readJSON text: env.REMOTE_HOST_JSON
        //             def DOCKER_EXIST = sshCommand remote: remoteHost, command: "docker ps -a -q --filter name=${name_container}"
        //             return  DOCKER_EXIST != '' 
        //         }
        //     }
        //     steps {
        //         script{
        //             def remoteHost = readJSON text: env.REMOTE_HOST_JSON
        //             sshCommand remote: remoteHost, command: "docker stop ${name_container}"
        //             sshCommand remote: remoteHost, command: "docker rm  ${name_container}"
                
        //             }
                    
        //         }  
            
        //     }
        // stage('ssh run') {
        //     steps {
        //         script{
        //             def remoteHost = readJSON text: env.REMOTE_HOST_JSON
        //             sshCommand remote: remoteHost, command: "docker run -d -p ${puerto_imagen}:80 --name ${name_container} ${name_imagen}"
        //             }
                    
        //         }  
            
        //     }
        }

    }
