pipeline {
  agent any
 parameters {
    
    //server values
        string(name: 'remoteHost', defaultValue: '192.168.100.173', description: 'dns o ip del host')
        
    }
    environment {
        //registry values
        hostname_registry = '192.168.100.173'
        port_registry = '5000'

        // container values
        name_container = 'proyecto-qa'
        name_imagen_origen = 'iproyecto-qa'
        tag_imagen = 'latest'
        puerto_imagen = '81'
        name_imagen = "${hostname_registry}:${port_registry}/${name_imagen_origen}:${tag_imagen}"   

    }
    stages {
        stage('initialize'){
            steps{
                script{
                remoteHost = [
                    name: 'pipe',
                    host: params.remoteHost,
                    user: 'jenkinsuser',
                    password: '123456',
                    allowAnyHosts: true,
                ]
                
                env.REMOTE_HOST_JSON = groovy.json.JsonOutput.toJson(remoteHost)   
                }
            }

        }

        stage('build and push') {
            steps {
                script{
                    sh ''' 
                    docker build -t ${name_imagen} dockerweb-multiserver/
                    docker push ${name_imagen}
                    '''
                    }
                    
                }                    
                                  
            }

        stage('rmi') {
            steps {
                script {
                    sh '''
                        docker rmi ${name_imagen}
                    '''
                    }
                }                                 
            }

        stage('ssh download') {
            steps {
                script{
                    def remoteHost = readJSON text: env.REMOTE_HOST_JSON
                    sshCommand remote: remoteHost, command: "docker pull ${name_imagen}"
                    }
                    
                }  
            
            }

        stage('ssh stop/rm') {
            when {
                expression { 
                    def remoteHost = readJSON text: env.REMOTE_HOST_JSON
                    DOCKER_EXIST = sh(returnStdout: true, script: 'echo "$(sshCommand remote: remoteHost, command: "docker ps -q --filter name=${name_container}")"').trim()
                    return  DOCKER_EXIST != '' 
                }
            }
            steps {
                script{
                    def remoteHost = readJSON text: env.REMOTE_HOST_JSON
                    sshCommand remote: remoteHost, command: "docker stop ${name_container}"
                    sshCommand remote: remoteHost, command: "docker rm  ${name_container}"
                
                    }
                    
                }  
            
            }
        stage('ssh run') {
            steps {
                script{
                    def remoteHost = readJSON text: env.REMOTE_HOST_JSON
                    sshCommand remote: remoteHost, command: "docker run -dp ${puerto_imagen}:80 --name ${name_container} ${name_imagen}"
                    }
                    
                }  
            
            }
        }

    }
