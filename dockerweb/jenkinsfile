def remote=[:]
remote.name = 'pi'
remote.host = '192.168.100.173'
remote.user = 'gian'
remote.password = '123456'
remote.allowAnyHosts = true


pipeline {
  agent any
 parameters {
        string(name: 'name_container', defaultValue: 'proyecto-qa', description: 'nombre del docker')
        string(name: 'name_imagen', defaultValue: 'iproyecto-qa', description: 'nombre de la imagen')
        string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
        string(name: 'puerto_imagen', defaultValue: '81', description: 'puerto a publicar')
        string(name: 'hostname_registry', defaultValue: '192.168.100.173', description: 'nombre del host donde esta el registry')
        string(name: 'port_registry', defaultValue: '5000', description: 'port del registry')
    }
    environment {
        name_final = "${name_container}${tag_imagen}${puerto_imagen}"        
    }
    stages {
          stage('stop/rm') {
            when {
                expression { 
                    DOCKER_EXIST = sh(returnStdout: true, script: 'echo "$(docker ps -q --filter name=${name_final})"').trim()
                    return  DOCKER_EXIST != '' 
                }
            }
            steps {
                script{
                    sh ''' 
                         docker stop ${name_final}
                         docker rm  ${name_final}
                    '''
                    }
                    
                }                    
                                  
            }
           
        stage('build') {
            steps {
                script{
                    sh ''' 
                    docker build -t ${name_imagen}:${tag_imagen} dockerweb/
                    '''
                    }
                    
                }                    
                                  
            }

        stage('rename and push') {
            steps {
                script {
                    sh '''
                        echo "${hostname_registry}:${port_registry}/${name_imagen}:${tag_imagen}"
                        docker tag ${name_imagen}:${tag_imagen} ${hostname_registry}:${port_registry}/${name_imagen}:${tag_imagen}
                        docker rmi ${name_imagen}:${tag_imagen}
                        docker push ${hostname_registry}:${port_registry}/${name_imagen}:${tag_imagen}
 
                    '''
                    }
                }                                 
            }
        stage('rmi') {
            steps {
                script {
                    sh '''
                        docker rmi ${hostname_registry}:${port_registry}/${name_imagen}:${tag_imagen}
                    '''
                    }
                }                                 
            }
        stage('ssh') {
            steps {
                script {
                    sshCommand remote: remote, command: "ls"
                    }
                }
            }
        }

    }
